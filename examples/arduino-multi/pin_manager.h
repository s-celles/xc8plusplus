/**
 * @file pin_manager.h
 * @brief Input/output pin definitions for PIC16F876A
 * @author SÃ©bastien Celles
 * @date 2025
 * @version 1.0
 *
 * @details This file contains all the pin definitions used in the project.
 *          It centralizes the port assignments of the PIC16F876A microcontroller
 *          to different components:
 *          - Indicator LEDs (5 LEDs)
 *          - Control push buttons (3 buttons)
 *
 * @par Connection diagram:
 * @verbatim
 * PIC16F876A - Pin assignment
 * @endverbatim
 *
 * @note Push buttons require external pull-up resistors or activation
 *       of the microcontroller's internal pull-ups.
 *       The file name is inspired by the naming convention used in PIC projects
 *       generated by MCC (MPLAB Code Configurator).
 *
 * @note The SPI interface uses bit-bang mode (software SPI) and not
 *       the hardware SPI module of the PIC16F876A.
 *
 * @warning Verify that the assignments match the electrical schematic
 *          of your board before use.
 *
 * @example
 * @code
 * // Turn on an LED
 * LED0 = 1;  // LED0 on
 * LED4 = 0;  // LED4 off
 *
 * // Read a push button
 * if (PB0 == 0) {  // Button pressed (inverted logic with pull-up)
 *     // Action to perform
 * }
 *
 * @endcode
 *
 * @see config.h for TRIS register configuration
 * @see lcd.h for PORT B definitions (LCD interface)
 */

#ifndef PIN_MANAGER_H
#define PIN_MANAGER_H

#include <xc.h>

/**
 * @name LED definitions
 * @brief Macros for the 5 system LEDs
 * @{
 */

/** @brief LED 4 connected to port C */
#define LED4 PORTCbits.RC2

/** @brief LED 3 connected to port C */
#define LED3 PORTCbits.RC1

/** @brief LED 2 connected to port C */
#define LED2 PORTCbits.RC0

/** @brief LED 1 connected to port A */
#define LED1 PORTAbits.RA5

/** @brief LED 0 connected to port A */
#define LED0 PORTAbits.RA3

/** @} */

/**
 * @name Push button definitions
 * @brief Macros for the 3 input push buttons
 * @{
 */

/** @brief Push button 0 connected to port A */
#define PB0 PORTAbits.RA2

/** @brief Push button 1 connected to port A */
#define PB1 PORTAbits.RA1

/** @brief Push button 2 connected to port A */
#define PB2 PORTAbits.RA4

/** @} */

/**
 * @name GPIO, peripheral I/O and interrupt management function prototypes
 * @brief Functions to initialize pins and manage interrupts
 * @details These functions are used to configure GPIO pins, peripheral I/O and interrupts
 * @{
 */

/**
 * @brief GPIO and peripheral I/O initialization
 * @details This function initializes GPIO pins and peripheral I/O parameters.
 *          It configures pin direction, enables pull-up resistors, and
 *          configures analog/digital parameters as needed.
 *          It must be called at the beginning of the program to configure pins.
 */
void PIN_MANAGER_Initialize(void);

/**
 * @brief Interrupt-on-change management routine
 * @details This function is called when an interrupt occurs on pins.
 *          It must handle the specific logic for pin state changes.
 *          Currently, it does nothing but can be extended as needed.
 */
void PIN_MANAGER_IOC(void);

/** @} */

#endif // PIN_MANAGER_H
